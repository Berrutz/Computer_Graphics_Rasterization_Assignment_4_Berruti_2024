READ ME 


Per quanto riguarda le proiezioni sia ORTOGRAFICHE che PROSPETTICA 

La posizione di (l,b,n) e (r,t,f) sono valori che si riferiscono al sistema di riferiemnto 
della Telecamera 

ESEMPIO CON UN PUNTO :


Position nel sistema di riferimento nel modello : 
   p1 =  -0.0532896   0.033748  0.0151123          1
Position nel sistema di riferimento nel Mondo (traslato e scalato e ruotato): 
   p2 =  -0.266448   0.16874     0.0755615         1
    
La telecamera è nella posizione nel mondo di [0,0,-2] percio':
il centro della telecamera c= [0,0,-2] è mappatto in  [0,0,0] nel suo sistema di coordinate 

Dal disegno di slide 12 pagina 2 , l'asse z punta nella direzione negativa 
            w :  0  0 -1   |           u :  1 -0  0   |            v : 0 1 0 


La posizione in Camera Coordinate system è : 
    
    p3 = -0.266448   0.16874  -2.07556         1         
    
    Nota bene la terza componente W è negativa per slide 12 page 2 

Ora bisogna specificare che il Near Plane n e il far Plane f devono avere per FORZA valori negativi
perche la telecamera guarda nella direzione negativa e l'asse w è (0,0,-1)

Percio assert n > f , n < 0 , f < 0  cosi posso usare la  matrice ortografica del prof
Ora se in questo caso specifico 
n = -2 
ed 
f = -3 
Quando proietto nel cubo unitario il punto p3 avendo la terza componente pari a :
-2.075
avra come terza componente di p4 un valore positivo perche riferito al SDF della telecamera 
che ricordo guarda nella direzione negativa 

Infatti il punto rappresentante il TOP-RIGHT-FAR PLANE (r,t,f) espresso nell'SDF della camera sarà
 1  1 -4  1
 e diventerà 
 1  1 -1  1            terza compoennete negativa giusta
 
E lo stesso vale per (l,b,n):
PROOF left-bootm near point in Camera Coordinate system : 
-1 -1 -2  1
e diventerà  :
-1 -1  1  1       terza compoennete positiva giusta


Position in Camera Coordinate system after PROJECTION : 

p4 = -0.266448   0.16874  0.924438         1


Nella parte di PROIEZIONE PROSPETTICA ricordarsi che bisogna normalizzare in coordinate cartesiane 
prima di rasterizzare 

Position in CARTESIAN after PROJECTION : -0.266448   0.16874  0.924438         1


Questa è solo la parte di Vertex Shader 



Ora manca :
    interpolate 
    Fragment Shader con z-buffer 
    Blending Shader
    
    
---------------------------------------

PROVE EX1 
Base: 
"Camera":
	{
		"IsPerspective": false,
		"Position": [0, 0, -2],
		"FieldOfView": 0.9853,
		"Near": -2,
		"FocalLength": 3,
		"Far": -4,
		"Target": [0, 0 , 0],
		"UpVector": [0, 1, 0],
		"LensRadius": 0.0
},

E funziona tutto in modo coerente modificare x,y,z nella Position 
Cambiare Near Plane e Far plane rimane coerente 
Anche target permette di decidere quale posizione osserva a telecamera e quindi decidere l'inclinazione 
dell'asse z
Per ora FieldOfView e Focal Lenght non sono usati , si usano nella prospettica 
I risultati di queste modifiche sono nella cartella ../img/ex1/ortographic 

Ora prove su PROJECTION 
Prima provo sul caso base lo stesso sopra 

-------------------------------------------------------

PROSPECTIVE 
Caso base :
"Camera":
	{
		"IsPerspective": true,
		"Position": [0, 0, -2],
		"FieldOfView": 0.9853,
		"Near": -1,
		"FocalLength": 4,
		"Far": -4,
		"Target": [0, 0 , 0],
		"UpVector": [0, 1, 0],
		"LensRadius": 0.0
    },
	"Objects": 
	{
			"Material": 0,
			"Type": "Mesh",
			"Path": "bunny.off",
			"angle_x": 0,
			"angle_y": 0,
			"angle_z": 0,
			"translation": [-0.5 , 0 , 0 ],
			"scale": [5, 5, 5]
	}

La matrice P si applica prima di ortographic 

quindi 
ortographic * P * p 

e poi si normalizza in cartesiano per avere la quarta componente a 1

Ho notato che RUOTARE , TRASLARE E SCALARE i dati funziona
anche allontanare la camera p_z=-3 
Anche Near e Far sono coerenti con la focal lenght 
Anche la modifica dell'angolo è coerente in radianti


--------------------------------------------------------------------------------

Ok è perfetto ha tutto senso NON TOCCARE PIU !!!

Aggiunta la parte per la gestione dell'aspect ratio

Nota bene anche se camera position z è positiva 
si modificano gli assi w, u , v e quindi tutto il resto rimane uguale 
, continua a guardare nella direzione negativa 

Gestita bene l'Aspect Ratio con i valori di framebuffer coerenti




